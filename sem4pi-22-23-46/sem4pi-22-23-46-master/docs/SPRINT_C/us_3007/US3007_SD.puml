@startuml
'http://plantuml.com/skinparam.html
skinparam handwritten false
skinparam packageStyle rect
skinparam defaultFontName FG Virgil
skinparam shadowing false

actor User as Actor
participant UpdatePostItUI as UI <<presentation>>
participant UpdatePostItController as Controller <<application>>

participant BoardManagementService as BoardManagementService <<application>>



participant PostIt as postIt <<domain>>
participant Cell as cell <<domain>>
participant newCell as cell2 <<domain>>
participant SharedBoard as SharedBoard <<domain>>
participant "mod : BoardModification" as modification <<domain>>
database boardRepository as BoardRepository <<repository>>



Actor --> UI: udpates PostIt
activate UI
UI -> Controller: create()
UI -> Controller: sharedBoardsWithWritePermission()
activate Controller
Controller -> Controller : user:currentUser()
Controller -> BoardManagementService: allBoardsBySystemUserWithWritePermission(user)
activate BoardManagementService

BoardManagementService -> BoardRepository: findBySystemUserWithWritePermission(user)
ref over BoardManagementService : SD_findBySystemUserWithWritePermission
activate BoardRepository

BoardRepository --> BoardManagementService: allUserBoardsWithWritePermissions
deactivate BoardRepository

BoardManagementService --> Controller: allUserBoardsWithWritePermissions
Controller --> UI: allUserBoardsWithWritePermissions
UI --> Actor: lists the boards with write permissions
Actor -> UI: selects a board

UI -> Controller : cellsOfBoardAndUser(boardSelected)
Controller -> Controller : user:currentUser()
Controller -> BoardManagementService : findCellsWithUserPostIts(board, user)

BoardManagementService -> BoardRepository: cellsWithOwnedPostIts = findCellsWithUserPostIts(board, user)
activate BoardRepository
BoardRepository --> BoardManagementService : cellsWithOwnedPostIts
deactivate BoardRepository
BoardManagementService --> Controller : cellsWithOwnedPostIts


Controller --> UI : cellsWithOwnedPostIts


UI --> Actor : shows cells with postIts owned by the user
Actor -> UI: selects a cell to update PostIt


        UI-->Actor: show update options


        alt option == content
        Actor --> UI : selects update content
        UI-->Actor: asks new content
        Actor --> UI : inputs new content


        UI -> Controller : updatePostItContent(board, cell, postIt, newContent)

        Controller -> BoardManagementService : updatePostItContent(board, cell, postIt, newContent)
        BoardManagementService -> BoardManagementService : deleteSatePostIt(board, postIt)
        activate BoardManagementService
        BoardManagementService --> postIt : deleteSatePostIt()
        activate postIt
           deactivate BoardManagementService
        deactivate postIt
        BoardManagementService --> BoardRepository : save(board)

        activate BoardRepository
        deactivate BoardRepository
        BoardManagementService --> cell : updatePostIt(postIt, newContent)
        activate cell
        deactivate cell
       Controller --> BoardManagementService : registerContentBoardModification(board, postIt, cell, newContent)
        BoardManagementService --> SharedBoard : addContentModification(postIt, cell, newContent)
       activate SharedBoard
       SharedBoard --> modification : createBoardModification()
       SharedBoard --> SharedBoard : addBoardModification(mod)

        
        BoardManagementService -> BoardRepository: save(board)
        deactivate SharedBoard
             activate BoardRepository

         BoardRepository ---> BoardManagementService : updatedBoard
      deactivate BoardRepository


         BoardManagementService --> Controller : updatedBoard
          Controller --> UI : updatedBoard

         UI --> Actor : displays success
end

alt option == placement
        Actor --> UI :  selects move
                UI -> Controller : availableCells(boardSelected)
                                 Controller -> SharedBoard : availableCells = availableCells()


                                 SharedBoard ---> Controller : availableCells
                                 Controller ---> UI : availableCells
         UI --> Actor : shows availableCells in board


         Actor --> UI :  selects a cell to place the postIt
                        UI -> Controller : movePostIt(boardSelected, oldCell, newCell, postIt)
                                         Controller -> BoardManagementService : movePostIt(boardSelected, oldCell, newCell, postIt)

                                          BoardManagementService -> BoardManagementService : deleteSatePostIt(board, postIt)
                                          activate BoardManagementService
                                               BoardManagementService --> postIt : deleteSatePostIt()
                                               activate postIt
                                               deactivate postIt
                                               deactivate BoardManagementService
                                               BoardManagementService --> BoardRepository : save(board)
                                               activate BoardRepository
                                               deactivate BoardRepository
                                               BoardManagementService --> cell2 : addMovedPostIt(parent)
                                                activate cell2
                                                deactivate cell2
                                              BoardManagementService --> BoardManagementService : registerPlacementBoardModification(board, postIt, oldCell, newCell);
                                              activate BoardManagementService
                                               BoardManagementService --> SharedBoard : addPlacementModification(createdPostIt, oldCell, newCell)
                                              activate SharedBoard

                                              SharedBoard --> modification : createBoardModification()
                                              SharedBoard --> SharedBoard : addBoardModification(mod)
                                               deactivate BoardManagementService
  BoardManagementService -> BoardRepository: save(board)
  deactivate SharedBoard
             activate BoardRepository

         BoardRepository ---> BoardManagementService : updatedBoard
      deactivate BoardRepository


         BoardManagementService --> Controller : updatedBoard
          Controller --> UI : updatedBoard

         UI --> Actor : displays success
          end




          alt option == delete
                  Actor --> UI :  selects delete
                          UI -> Controller : deletePostIt(boardSelected, cell, postIt)

                                                   Controller -> BoardManagementService : deletePostIt(boardSelected, cell, postIt)

                                                    BoardManagementService -> BoardManagementService : deleteSatePostIt(board, postIt)
                                                    activate BoardManagementService
                                                         BoardManagementService --> postIt : deleteSatePostIt()

                                                         activate postIt
                                                         deactivate postIt
                                                         deactivate BoardManagementService
                                                         BoardManagementService --> BoardRepository : save(board)
                                                         activate BoardRepository
                                                         deactivate BoardRepository
                                                         BoardManagementService --> cell : updatedPostIt(postIt, postItContent)
                                                         activate cell
                                                         cell --> cell : cell.latestpostIt.deleteStatePostIt()

                                                       BoardManagementService --> BoardManagementService : registerPrimaryBoardModification(board, createdPostIt, ModificationType.DELETE, cell)
                                                       activate BoardManagementService
                                                         deactivate cell
                                                        BoardManagementService --> SharedBoard : addDeleteModification(createdPostIt, cell)
                                                        activate SharedBoard
                                                       SharedBoard --> modification : createBoardModification()
                                                       SharedBoard --> SharedBoard : addBoardModification(mod)
                                                       deactivate BoardManagementService
                                                        BoardManagementService -> BoardRepository: save(board)
                                                        deactivate SharedBoard
                                                                   activate BoardRepository

                                                               BoardRepository ---> BoardManagementService : updatedBoard
                                                            deactivate BoardRepository


                                                               BoardManagementService --> Controller : updatedBoard
                                                                Controller --> UI : updatedBoard

                                                               UI --> Actor : displays success
                    end

         deactivate Controller
deactivate UI
@enduml