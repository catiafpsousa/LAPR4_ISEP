@startuml
'https://plantuml.com/class-diagram

package "presentation" #DDDDDD{
    class OpenCourseUI <<ui>>{
    - theController : OpenCourseController
    + doShow()
    }
}



package "domain" #dbd8ae{


       
        class CourseStudentsLimit <<value object>> {
        -min : int
        -max : int
        +CourseStudentsLimit (min, max)
        }

        class Course <<aggregate root>> <<entity>>{
        - code : CourseCode
        - name : CourseName
        - description : CourseDescription
        - courseState : CourseName
        - courseTeachers : List<Teacher>
        - teacherInCharge : Teacher
        - limits : CourseStudentsLimit
        - createdOn : Calendar
        - modifiedOn : Calendar
        + Course (code, name, description, limits)
        + Course (code, name, description, limits, createdOn)
         + open(now)
        }

        enum CourseState{
        CLOSED
        OPEN
        ENROLL
        IN_PROGRESS
        }

        class Teacher <<value object>> <<id>>{
         -acronym : Acronym
         -systemUser : SystemUser
         +Teacher(user : SystemUser)
        }

        class CourseDescription <<value object>>{
        -description : String
        +valueOf(description)
        + CourseDescription (description)
        }

        class CourseCode <<value object>>{
        -code : String
        +valueOf(code)
        +CourseCode (code)
        }

        class CourseName<<value object>>{
        -name : String
         +valueOf(name)
        + CourseName (name)
        }


}
    package "persistence" #dbd8ae{
       interface CourseRepository{
       findAll()
       save(course : Course)
       }
    }
package "application" #eaf4d3{
    class OpenCourseController <<controller>>{
        - authz : AuthorizationService
        - courseSvc : CourseManagementService
        - courseRepository : CourseRepository
        + closedCourses()
        + open(course)
    }

    class CourseManagementService <<service>>{
         - courseRepository : CourseRepository
         + enrollingCourses()
         + getCourseRepository()
         + closedCourses()
    }

}


OpenCourseUI .-> OpenCourseController
OpenCourseController .-> CourseManagementService


Course --> CourseCode
Course ----> CourseDescription
Course --> Teacher
Course --> CourseName

Course --> CourseState

CourseManagementService .> CourseRepository

Course ----> CourseStudentsLimit
OpenCourseController .--> Course

CourseRepository --> Course

@enduml
