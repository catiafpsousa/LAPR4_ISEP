@startuml
'http://plantuml.com/skinparam.html
skinparam handwritten false
skinparam packageStyle rect
skinparam defaultFontName FG Virgil
skinparam shadowing false

actor Manager as Actor
participant OpenCourseUI as UI <<presentation>>
participant OpenCourseController as Controller <<application>>
participant AuthorizationService  as authz <<application>>
participant CourseManagementService as courseSvc <<application>>

participant Course as course <<domain>>

database courseRepository as Repository <<repository>>


Actor --> UI: opens course
activate UI
    UI -> Controller: create

    UI -> Controller: closedCourses()
    activate Controller

        Controller -> authz: ensureAuthenticatedcourseHasAnyOf(ADMIN, POWER_course)
        activate authz
        deactivate authz
        Controller --> courseSvc : create


Controller -> courseSvc : closedCourses()
 activate courseSvc

            courseSvc -> Repository: closedCourses = findByClosedState(true)
            activate Repository

            Repository --> courseSvc
            deactivate Repository
            courseSvc --> Controller
            Controller --> UI : closedCourses





        UI-->Actor: list closed courses

        Actor --> UI : selects course
        UI -> Controller : openCourse(course)
        Controller -> authz: ensureAuthenticatedcourseHasAnyOf(ADMIN, POWER_course)
                activate authz
                deactivate authz
        Controller -> courseSvc : openCourse(course)
        courseSvc ->  course : open(CurrentTimeCalendars.now())
        courseSvc ->  Repository : save(course)
        activate Repository
        Repository --> courseSvc
        deactivate Repository
         courseSvc -->  Controller
         Controller --> UI
         UI --> Actor : displays success

         deactivate Controller
deactivate UI
@enduml